// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/boxjan/misc/pkg/knock/ent/predicate"
	"github.com/boxjan/misc/pkg/knock/ent/wireguardclient"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeWireguardClient = "WireguardClient"
)

// WireguardClientMutation represents an operation that mutates the WireguardClient nodes in the graph.
type WireguardClientMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	created_at         *time.Time
	updated_at         *time.Time
	destroyed_at       *time.Time
	expired            *bool
	identify           *string
	server_private_key *string
	client_private_key *string
	netif_name         *string
	peer_addr          *string
	listen_addr        *string
	alloc_cidr         *string
	server_address     *string
	client_address     *string
	receive_bytes      *uint64
	addreceive_bytes   *int64
	transmit_bytes     *uint64
	addtransmit_bytes  *int64
	clearedFields      map[string]struct{}
	done               bool
	oldValue           func(context.Context) (*WireguardClient, error)
	predicates         []predicate.WireguardClient
}

var _ ent.Mutation = (*WireguardClientMutation)(nil)

// wireguardclientOption allows management of the mutation configuration using functional options.
type wireguardclientOption func(*WireguardClientMutation)

// newWireguardClientMutation creates new mutation for the WireguardClient entity.
func newWireguardClientMutation(c config, op Op, opts ...wireguardclientOption) *WireguardClientMutation {
	m := &WireguardClientMutation{
		config:        c,
		op:            op,
		typ:           TypeWireguardClient,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWireguardClientID sets the ID field of the mutation.
func withWireguardClientID(id int) wireguardclientOption {
	return func(m *WireguardClientMutation) {
		var (
			err   error
			once  sync.Once
			value *WireguardClient
		)
		m.oldValue = func(ctx context.Context) (*WireguardClient, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().WireguardClient.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWireguardClient sets the old WireguardClient of the mutation.
func withWireguardClient(node *WireguardClient) wireguardclientOption {
	return func(m *WireguardClientMutation) {
		m.oldValue = func(context.Context) (*WireguardClient, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WireguardClientMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WireguardClientMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WireguardClientMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WireguardClientMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().WireguardClient.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *WireguardClientMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *WireguardClientMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the WireguardClient entity.
// If the WireguardClient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WireguardClientMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *WireguardClientMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *WireguardClientMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *WireguardClientMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the WireguardClient entity.
// If the WireguardClient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WireguardClientMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *WireguardClientMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDestroyedAt sets the "destroyed_at" field.
func (m *WireguardClientMutation) SetDestroyedAt(t time.Time) {
	m.destroyed_at = &t
}

// DestroyedAt returns the value of the "destroyed_at" field in the mutation.
func (m *WireguardClientMutation) DestroyedAt() (r time.Time, exists bool) {
	v := m.destroyed_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDestroyedAt returns the old "destroyed_at" field's value of the WireguardClient entity.
// If the WireguardClient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WireguardClientMutation) OldDestroyedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDestroyedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDestroyedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDestroyedAt: %w", err)
	}
	return oldValue.DestroyedAt, nil
}

// ResetDestroyedAt resets all changes to the "destroyed_at" field.
func (m *WireguardClientMutation) ResetDestroyedAt() {
	m.destroyed_at = nil
}

// SetExpired sets the "expired" field.
func (m *WireguardClientMutation) SetExpired(b bool) {
	m.expired = &b
}

// Expired returns the value of the "expired" field in the mutation.
func (m *WireguardClientMutation) Expired() (r bool, exists bool) {
	v := m.expired
	if v == nil {
		return
	}
	return *v, true
}

// OldExpired returns the old "expired" field's value of the WireguardClient entity.
// If the WireguardClient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WireguardClientMutation) OldExpired(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpired is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpired requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpired: %w", err)
	}
	return oldValue.Expired, nil
}

// ResetExpired resets all changes to the "expired" field.
func (m *WireguardClientMutation) ResetExpired() {
	m.expired = nil
}

// SetIdentify sets the "identify" field.
func (m *WireguardClientMutation) SetIdentify(s string) {
	m.identify = &s
}

// Identify returns the value of the "identify" field in the mutation.
func (m *WireguardClientMutation) Identify() (r string, exists bool) {
	v := m.identify
	if v == nil {
		return
	}
	return *v, true
}

// OldIdentify returns the old "identify" field's value of the WireguardClient entity.
// If the WireguardClient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WireguardClientMutation) OldIdentify(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdentify is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdentify requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdentify: %w", err)
	}
	return oldValue.Identify, nil
}

// ResetIdentify resets all changes to the "identify" field.
func (m *WireguardClientMutation) ResetIdentify() {
	m.identify = nil
}

// SetServerPrivateKey sets the "server_private_key" field.
func (m *WireguardClientMutation) SetServerPrivateKey(s string) {
	m.server_private_key = &s
}

// ServerPrivateKey returns the value of the "server_private_key" field in the mutation.
func (m *WireguardClientMutation) ServerPrivateKey() (r string, exists bool) {
	v := m.server_private_key
	if v == nil {
		return
	}
	return *v, true
}

// OldServerPrivateKey returns the old "server_private_key" field's value of the WireguardClient entity.
// If the WireguardClient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WireguardClientMutation) OldServerPrivateKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldServerPrivateKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldServerPrivateKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldServerPrivateKey: %w", err)
	}
	return oldValue.ServerPrivateKey, nil
}

// ResetServerPrivateKey resets all changes to the "server_private_key" field.
func (m *WireguardClientMutation) ResetServerPrivateKey() {
	m.server_private_key = nil
}

// SetClientPrivateKey sets the "client_private_key" field.
func (m *WireguardClientMutation) SetClientPrivateKey(s string) {
	m.client_private_key = &s
}

// ClientPrivateKey returns the value of the "client_private_key" field in the mutation.
func (m *WireguardClientMutation) ClientPrivateKey() (r string, exists bool) {
	v := m.client_private_key
	if v == nil {
		return
	}
	return *v, true
}

// OldClientPrivateKey returns the old "client_private_key" field's value of the WireguardClient entity.
// If the WireguardClient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WireguardClientMutation) OldClientPrivateKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClientPrivateKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClientPrivateKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClientPrivateKey: %w", err)
	}
	return oldValue.ClientPrivateKey, nil
}

// ResetClientPrivateKey resets all changes to the "client_private_key" field.
func (m *WireguardClientMutation) ResetClientPrivateKey() {
	m.client_private_key = nil
}

// SetNetifName sets the "netif_name" field.
func (m *WireguardClientMutation) SetNetifName(s string) {
	m.netif_name = &s
}

// NetifName returns the value of the "netif_name" field in the mutation.
func (m *WireguardClientMutation) NetifName() (r string, exists bool) {
	v := m.netif_name
	if v == nil {
		return
	}
	return *v, true
}

// OldNetifName returns the old "netif_name" field's value of the WireguardClient entity.
// If the WireguardClient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WireguardClientMutation) OldNetifName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNetifName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNetifName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNetifName: %w", err)
	}
	return oldValue.NetifName, nil
}

// ResetNetifName resets all changes to the "netif_name" field.
func (m *WireguardClientMutation) ResetNetifName() {
	m.netif_name = nil
}

// SetPeerAddr sets the "peer_addr" field.
func (m *WireguardClientMutation) SetPeerAddr(s string) {
	m.peer_addr = &s
}

// PeerAddr returns the value of the "peer_addr" field in the mutation.
func (m *WireguardClientMutation) PeerAddr() (r string, exists bool) {
	v := m.peer_addr
	if v == nil {
		return
	}
	return *v, true
}

// OldPeerAddr returns the old "peer_addr" field's value of the WireguardClient entity.
// If the WireguardClient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WireguardClientMutation) OldPeerAddr(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPeerAddr is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPeerAddr requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPeerAddr: %w", err)
	}
	return oldValue.PeerAddr, nil
}

// ResetPeerAddr resets all changes to the "peer_addr" field.
func (m *WireguardClientMutation) ResetPeerAddr() {
	m.peer_addr = nil
}

// SetListenAddr sets the "listen_addr" field.
func (m *WireguardClientMutation) SetListenAddr(s string) {
	m.listen_addr = &s
}

// ListenAddr returns the value of the "listen_addr" field in the mutation.
func (m *WireguardClientMutation) ListenAddr() (r string, exists bool) {
	v := m.listen_addr
	if v == nil {
		return
	}
	return *v, true
}

// OldListenAddr returns the old "listen_addr" field's value of the WireguardClient entity.
// If the WireguardClient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WireguardClientMutation) OldListenAddr(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldListenAddr is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldListenAddr requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldListenAddr: %w", err)
	}
	return oldValue.ListenAddr, nil
}

// ResetListenAddr resets all changes to the "listen_addr" field.
func (m *WireguardClientMutation) ResetListenAddr() {
	m.listen_addr = nil
}

// SetAllocCidr sets the "alloc_cidr" field.
func (m *WireguardClientMutation) SetAllocCidr(s string) {
	m.alloc_cidr = &s
}

// AllocCidr returns the value of the "alloc_cidr" field in the mutation.
func (m *WireguardClientMutation) AllocCidr() (r string, exists bool) {
	v := m.alloc_cidr
	if v == nil {
		return
	}
	return *v, true
}

// OldAllocCidr returns the old "alloc_cidr" field's value of the WireguardClient entity.
// If the WireguardClient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WireguardClientMutation) OldAllocCidr(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAllocCidr is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAllocCidr requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAllocCidr: %w", err)
	}
	return oldValue.AllocCidr, nil
}

// ResetAllocCidr resets all changes to the "alloc_cidr" field.
func (m *WireguardClientMutation) ResetAllocCidr() {
	m.alloc_cidr = nil
}

// SetServerAddress sets the "server_address" field.
func (m *WireguardClientMutation) SetServerAddress(s string) {
	m.server_address = &s
}

// ServerAddress returns the value of the "server_address" field in the mutation.
func (m *WireguardClientMutation) ServerAddress() (r string, exists bool) {
	v := m.server_address
	if v == nil {
		return
	}
	return *v, true
}

// OldServerAddress returns the old "server_address" field's value of the WireguardClient entity.
// If the WireguardClient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WireguardClientMutation) OldServerAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldServerAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldServerAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldServerAddress: %w", err)
	}
	return oldValue.ServerAddress, nil
}

// ResetServerAddress resets all changes to the "server_address" field.
func (m *WireguardClientMutation) ResetServerAddress() {
	m.server_address = nil
}

// SetClientAddress sets the "client_address" field.
func (m *WireguardClientMutation) SetClientAddress(s string) {
	m.client_address = &s
}

// ClientAddress returns the value of the "client_address" field in the mutation.
func (m *WireguardClientMutation) ClientAddress() (r string, exists bool) {
	v := m.client_address
	if v == nil {
		return
	}
	return *v, true
}

// OldClientAddress returns the old "client_address" field's value of the WireguardClient entity.
// If the WireguardClient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WireguardClientMutation) OldClientAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClientAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClientAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClientAddress: %w", err)
	}
	return oldValue.ClientAddress, nil
}

// ResetClientAddress resets all changes to the "client_address" field.
func (m *WireguardClientMutation) ResetClientAddress() {
	m.client_address = nil
}

// SetReceiveBytes sets the "receive_bytes" field.
func (m *WireguardClientMutation) SetReceiveBytes(u uint64) {
	m.receive_bytes = &u
	m.addreceive_bytes = nil
}

// ReceiveBytes returns the value of the "receive_bytes" field in the mutation.
func (m *WireguardClientMutation) ReceiveBytes() (r uint64, exists bool) {
	v := m.receive_bytes
	if v == nil {
		return
	}
	return *v, true
}

// OldReceiveBytes returns the old "receive_bytes" field's value of the WireguardClient entity.
// If the WireguardClient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WireguardClientMutation) OldReceiveBytes(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReceiveBytes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReceiveBytes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReceiveBytes: %w", err)
	}
	return oldValue.ReceiveBytes, nil
}

// AddReceiveBytes adds u to the "receive_bytes" field.
func (m *WireguardClientMutation) AddReceiveBytes(u int64) {
	if m.addreceive_bytes != nil {
		*m.addreceive_bytes += u
	} else {
		m.addreceive_bytes = &u
	}
}

// AddedReceiveBytes returns the value that was added to the "receive_bytes" field in this mutation.
func (m *WireguardClientMutation) AddedReceiveBytes() (r int64, exists bool) {
	v := m.addreceive_bytes
	if v == nil {
		return
	}
	return *v, true
}

// ResetReceiveBytes resets all changes to the "receive_bytes" field.
func (m *WireguardClientMutation) ResetReceiveBytes() {
	m.receive_bytes = nil
	m.addreceive_bytes = nil
}

// SetTransmitBytes sets the "transmit_bytes" field.
func (m *WireguardClientMutation) SetTransmitBytes(u uint64) {
	m.transmit_bytes = &u
	m.addtransmit_bytes = nil
}

// TransmitBytes returns the value of the "transmit_bytes" field in the mutation.
func (m *WireguardClientMutation) TransmitBytes() (r uint64, exists bool) {
	v := m.transmit_bytes
	if v == nil {
		return
	}
	return *v, true
}

// OldTransmitBytes returns the old "transmit_bytes" field's value of the WireguardClient entity.
// If the WireguardClient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WireguardClientMutation) OldTransmitBytes(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTransmitBytes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTransmitBytes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTransmitBytes: %w", err)
	}
	return oldValue.TransmitBytes, nil
}

// AddTransmitBytes adds u to the "transmit_bytes" field.
func (m *WireguardClientMutation) AddTransmitBytes(u int64) {
	if m.addtransmit_bytes != nil {
		*m.addtransmit_bytes += u
	} else {
		m.addtransmit_bytes = &u
	}
}

// AddedTransmitBytes returns the value that was added to the "transmit_bytes" field in this mutation.
func (m *WireguardClientMutation) AddedTransmitBytes() (r int64, exists bool) {
	v := m.addtransmit_bytes
	if v == nil {
		return
	}
	return *v, true
}

// ResetTransmitBytes resets all changes to the "transmit_bytes" field.
func (m *WireguardClientMutation) ResetTransmitBytes() {
	m.transmit_bytes = nil
	m.addtransmit_bytes = nil
}

// Where appends a list predicates to the WireguardClientMutation builder.
func (m *WireguardClientMutation) Where(ps ...predicate.WireguardClient) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *WireguardClientMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (WireguardClient).
func (m *WireguardClientMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WireguardClientMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m.created_at != nil {
		fields = append(fields, wireguardclient.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, wireguardclient.FieldUpdatedAt)
	}
	if m.destroyed_at != nil {
		fields = append(fields, wireguardclient.FieldDestroyedAt)
	}
	if m.expired != nil {
		fields = append(fields, wireguardclient.FieldExpired)
	}
	if m.identify != nil {
		fields = append(fields, wireguardclient.FieldIdentify)
	}
	if m.server_private_key != nil {
		fields = append(fields, wireguardclient.FieldServerPrivateKey)
	}
	if m.client_private_key != nil {
		fields = append(fields, wireguardclient.FieldClientPrivateKey)
	}
	if m.netif_name != nil {
		fields = append(fields, wireguardclient.FieldNetifName)
	}
	if m.peer_addr != nil {
		fields = append(fields, wireguardclient.FieldPeerAddr)
	}
	if m.listen_addr != nil {
		fields = append(fields, wireguardclient.FieldListenAddr)
	}
	if m.alloc_cidr != nil {
		fields = append(fields, wireguardclient.FieldAllocCidr)
	}
	if m.server_address != nil {
		fields = append(fields, wireguardclient.FieldServerAddress)
	}
	if m.client_address != nil {
		fields = append(fields, wireguardclient.FieldClientAddress)
	}
	if m.receive_bytes != nil {
		fields = append(fields, wireguardclient.FieldReceiveBytes)
	}
	if m.transmit_bytes != nil {
		fields = append(fields, wireguardclient.FieldTransmitBytes)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WireguardClientMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case wireguardclient.FieldCreatedAt:
		return m.CreatedAt()
	case wireguardclient.FieldUpdatedAt:
		return m.UpdatedAt()
	case wireguardclient.FieldDestroyedAt:
		return m.DestroyedAt()
	case wireguardclient.FieldExpired:
		return m.Expired()
	case wireguardclient.FieldIdentify:
		return m.Identify()
	case wireguardclient.FieldServerPrivateKey:
		return m.ServerPrivateKey()
	case wireguardclient.FieldClientPrivateKey:
		return m.ClientPrivateKey()
	case wireguardclient.FieldNetifName:
		return m.NetifName()
	case wireguardclient.FieldPeerAddr:
		return m.PeerAddr()
	case wireguardclient.FieldListenAddr:
		return m.ListenAddr()
	case wireguardclient.FieldAllocCidr:
		return m.AllocCidr()
	case wireguardclient.FieldServerAddress:
		return m.ServerAddress()
	case wireguardclient.FieldClientAddress:
		return m.ClientAddress()
	case wireguardclient.FieldReceiveBytes:
		return m.ReceiveBytes()
	case wireguardclient.FieldTransmitBytes:
		return m.TransmitBytes()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WireguardClientMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case wireguardclient.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case wireguardclient.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case wireguardclient.FieldDestroyedAt:
		return m.OldDestroyedAt(ctx)
	case wireguardclient.FieldExpired:
		return m.OldExpired(ctx)
	case wireguardclient.FieldIdentify:
		return m.OldIdentify(ctx)
	case wireguardclient.FieldServerPrivateKey:
		return m.OldServerPrivateKey(ctx)
	case wireguardclient.FieldClientPrivateKey:
		return m.OldClientPrivateKey(ctx)
	case wireguardclient.FieldNetifName:
		return m.OldNetifName(ctx)
	case wireguardclient.FieldPeerAddr:
		return m.OldPeerAddr(ctx)
	case wireguardclient.FieldListenAddr:
		return m.OldListenAddr(ctx)
	case wireguardclient.FieldAllocCidr:
		return m.OldAllocCidr(ctx)
	case wireguardclient.FieldServerAddress:
		return m.OldServerAddress(ctx)
	case wireguardclient.FieldClientAddress:
		return m.OldClientAddress(ctx)
	case wireguardclient.FieldReceiveBytes:
		return m.OldReceiveBytes(ctx)
	case wireguardclient.FieldTransmitBytes:
		return m.OldTransmitBytes(ctx)
	}
	return nil, fmt.Errorf("unknown WireguardClient field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WireguardClientMutation) SetField(name string, value ent.Value) error {
	switch name {
	case wireguardclient.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case wireguardclient.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case wireguardclient.FieldDestroyedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDestroyedAt(v)
		return nil
	case wireguardclient.FieldExpired:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpired(v)
		return nil
	case wireguardclient.FieldIdentify:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdentify(v)
		return nil
	case wireguardclient.FieldServerPrivateKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetServerPrivateKey(v)
		return nil
	case wireguardclient.FieldClientPrivateKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClientPrivateKey(v)
		return nil
	case wireguardclient.FieldNetifName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNetifName(v)
		return nil
	case wireguardclient.FieldPeerAddr:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPeerAddr(v)
		return nil
	case wireguardclient.FieldListenAddr:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetListenAddr(v)
		return nil
	case wireguardclient.FieldAllocCidr:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAllocCidr(v)
		return nil
	case wireguardclient.FieldServerAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetServerAddress(v)
		return nil
	case wireguardclient.FieldClientAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClientAddress(v)
		return nil
	case wireguardclient.FieldReceiveBytes:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReceiveBytes(v)
		return nil
	case wireguardclient.FieldTransmitBytes:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTransmitBytes(v)
		return nil
	}
	return fmt.Errorf("unknown WireguardClient field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WireguardClientMutation) AddedFields() []string {
	var fields []string
	if m.addreceive_bytes != nil {
		fields = append(fields, wireguardclient.FieldReceiveBytes)
	}
	if m.addtransmit_bytes != nil {
		fields = append(fields, wireguardclient.FieldTransmitBytes)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WireguardClientMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case wireguardclient.FieldReceiveBytes:
		return m.AddedReceiveBytes()
	case wireguardclient.FieldTransmitBytes:
		return m.AddedTransmitBytes()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WireguardClientMutation) AddField(name string, value ent.Value) error {
	switch name {
	case wireguardclient.FieldReceiveBytes:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddReceiveBytes(v)
		return nil
	case wireguardclient.FieldTransmitBytes:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTransmitBytes(v)
		return nil
	}
	return fmt.Errorf("unknown WireguardClient numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WireguardClientMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WireguardClientMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WireguardClientMutation) ClearField(name string) error {
	return fmt.Errorf("unknown WireguardClient nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WireguardClientMutation) ResetField(name string) error {
	switch name {
	case wireguardclient.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case wireguardclient.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case wireguardclient.FieldDestroyedAt:
		m.ResetDestroyedAt()
		return nil
	case wireguardclient.FieldExpired:
		m.ResetExpired()
		return nil
	case wireguardclient.FieldIdentify:
		m.ResetIdentify()
		return nil
	case wireguardclient.FieldServerPrivateKey:
		m.ResetServerPrivateKey()
		return nil
	case wireguardclient.FieldClientPrivateKey:
		m.ResetClientPrivateKey()
		return nil
	case wireguardclient.FieldNetifName:
		m.ResetNetifName()
		return nil
	case wireguardclient.FieldPeerAddr:
		m.ResetPeerAddr()
		return nil
	case wireguardclient.FieldListenAddr:
		m.ResetListenAddr()
		return nil
	case wireguardclient.FieldAllocCidr:
		m.ResetAllocCidr()
		return nil
	case wireguardclient.FieldServerAddress:
		m.ResetServerAddress()
		return nil
	case wireguardclient.FieldClientAddress:
		m.ResetClientAddress()
		return nil
	case wireguardclient.FieldReceiveBytes:
		m.ResetReceiveBytes()
		return nil
	case wireguardclient.FieldTransmitBytes:
		m.ResetTransmitBytes()
		return nil
	}
	return fmt.Errorf("unknown WireguardClient field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WireguardClientMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WireguardClientMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WireguardClientMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WireguardClientMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WireguardClientMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WireguardClientMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WireguardClientMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown WireguardClient unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WireguardClientMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown WireguardClient edge %s", name)
}
