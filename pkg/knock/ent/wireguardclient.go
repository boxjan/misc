// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/boxjan/misc/pkg/knock/ent/wireguardclient"
)

// WireguardClient is the model entity for the WireguardClient schema.
type WireguardClient struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DestroyedAt holds the value of the "destroyed_at" field.
	DestroyedAt time.Time `json:"destroyed_at,omitempty"`
	// Expired holds the value of the "expired" field.
	Expired bool `json:"expired,omitempty"`
	// Identify holds the value of the "identify" field.
	Identify string `json:"identify,omitempty"`
	// ServerPrivateKey holds the value of the "server_private_key" field.
	ServerPrivateKey string `json:"server_private_key,omitempty"`
	// ClientPrivateKey holds the value of the "client_private_key" field.
	ClientPrivateKey string `json:"client_private_key,omitempty"`
	// NetifName holds the value of the "netif_name" field.
	NetifName string `json:"netif_name,omitempty"`
	// PeerAddr holds the value of the "peer_addr" field.
	PeerAddr string `json:"peer_addr,omitempty"`
	// ListenAddr holds the value of the "listen_addr" field.
	ListenAddr string `json:"listen_addr,omitempty"`
	// AllocCidr holds the value of the "alloc_cidr" field.
	AllocCidr string `json:"alloc_cidr,omitempty"`
	// ServerAddress holds the value of the "server_address" field.
	ServerAddress string `json:"server_address,omitempty"`
	// ClientAddress holds the value of the "client_address" field.
	ClientAddress string `json:"client_address,omitempty"`
	// ReceiveBytes holds the value of the "receive_bytes" field.
	ReceiveBytes uint64 `json:"receive_bytes,omitempty"`
	// TransmitBytes holds the value of the "transmit_bytes" field.
	TransmitBytes uint64 `json:"transmit_bytes,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WireguardClient) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case wireguardclient.FieldExpired:
			values[i] = new(sql.NullBool)
		case wireguardclient.FieldID, wireguardclient.FieldReceiveBytes, wireguardclient.FieldTransmitBytes:
			values[i] = new(sql.NullInt64)
		case wireguardclient.FieldIdentify, wireguardclient.FieldServerPrivateKey, wireguardclient.FieldClientPrivateKey, wireguardclient.FieldNetifName, wireguardclient.FieldPeerAddr, wireguardclient.FieldListenAddr, wireguardclient.FieldAllocCidr, wireguardclient.FieldServerAddress, wireguardclient.FieldClientAddress:
			values[i] = new(sql.NullString)
		case wireguardclient.FieldCreatedAt, wireguardclient.FieldUpdatedAt, wireguardclient.FieldDestroyedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type WireguardClient", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WireguardClient fields.
func (wc *WireguardClient) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case wireguardclient.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wc.ID = int(value.Int64)
		case wireguardclient.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				wc.CreatedAt = value.Time
			}
		case wireguardclient.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				wc.UpdatedAt = value.Time
			}
		case wireguardclient.FieldDestroyedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field destroyed_at", values[i])
			} else if value.Valid {
				wc.DestroyedAt = value.Time
			}
		case wireguardclient.FieldExpired:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field expired", values[i])
			} else if value.Valid {
				wc.Expired = value.Bool
			}
		case wireguardclient.FieldIdentify:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field identify", values[i])
			} else if value.Valid {
				wc.Identify = value.String
			}
		case wireguardclient.FieldServerPrivateKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field server_private_key", values[i])
			} else if value.Valid {
				wc.ServerPrivateKey = value.String
			}
		case wireguardclient.FieldClientPrivateKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_private_key", values[i])
			} else if value.Valid {
				wc.ClientPrivateKey = value.String
			}
		case wireguardclient.FieldNetifName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field netif_name", values[i])
			} else if value.Valid {
				wc.NetifName = value.String
			}
		case wireguardclient.FieldPeerAddr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field peer_addr", values[i])
			} else if value.Valid {
				wc.PeerAddr = value.String
			}
		case wireguardclient.FieldListenAddr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field listen_addr", values[i])
			} else if value.Valid {
				wc.ListenAddr = value.String
			}
		case wireguardclient.FieldAllocCidr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alloc_cidr", values[i])
			} else if value.Valid {
				wc.AllocCidr = value.String
			}
		case wireguardclient.FieldServerAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field server_address", values[i])
			} else if value.Valid {
				wc.ServerAddress = value.String
			}
		case wireguardclient.FieldClientAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_address", values[i])
			} else if value.Valid {
				wc.ClientAddress = value.String
			}
		case wireguardclient.FieldReceiveBytes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field receive_bytes", values[i])
			} else if value.Valid {
				wc.ReceiveBytes = uint64(value.Int64)
			}
		case wireguardclient.FieldTransmitBytes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field transmit_bytes", values[i])
			} else if value.Valid {
				wc.TransmitBytes = uint64(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this WireguardClient.
// Note that you need to call WireguardClient.Unwrap() before calling this method if this WireguardClient
// was returned from a transaction, and the transaction was committed or rolled back.
func (wc *WireguardClient) Update() *WireguardClientUpdateOne {
	return (&WireguardClientClient{config: wc.config}).UpdateOne(wc)
}

// Unwrap unwraps the WireguardClient entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wc *WireguardClient) Unwrap() *WireguardClient {
	tx, ok := wc.config.driver.(*txDriver)
	if !ok {
		panic("ent: WireguardClient is not a transactional entity")
	}
	wc.config.driver = tx.drv
	return wc
}

// String implements the fmt.Stringer.
func (wc *WireguardClient) String() string {
	var builder strings.Builder
	builder.WriteString("WireguardClient(")
	builder.WriteString(fmt.Sprintf("id=%v", wc.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(wc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(wc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", destroyed_at=")
	builder.WriteString(wc.DestroyedAt.Format(time.ANSIC))
	builder.WriteString(", expired=")
	builder.WriteString(fmt.Sprintf("%v", wc.Expired))
	builder.WriteString(", identify=")
	builder.WriteString(wc.Identify)
	builder.WriteString(", server_private_key=")
	builder.WriteString(wc.ServerPrivateKey)
	builder.WriteString(", client_private_key=")
	builder.WriteString(wc.ClientPrivateKey)
	builder.WriteString(", netif_name=")
	builder.WriteString(wc.NetifName)
	builder.WriteString(", peer_addr=")
	builder.WriteString(wc.PeerAddr)
	builder.WriteString(", listen_addr=")
	builder.WriteString(wc.ListenAddr)
	builder.WriteString(", alloc_cidr=")
	builder.WriteString(wc.AllocCidr)
	builder.WriteString(", server_address=")
	builder.WriteString(wc.ServerAddress)
	builder.WriteString(", client_address=")
	builder.WriteString(wc.ClientAddress)
	builder.WriteString(", receive_bytes=")
	builder.WriteString(fmt.Sprintf("%v", wc.ReceiveBytes))
	builder.WriteString(", transmit_bytes=")
	builder.WriteString(fmt.Sprintf("%v", wc.TransmitBytes))
	builder.WriteByte(')')
	return builder.String()
}

// WireguardClients is a parsable slice of WireguardClient.
type WireguardClients []*WireguardClient

func (wc WireguardClients) config(cfg config) {
	for _i := range wc {
		wc[_i].config = cfg
	}
}
