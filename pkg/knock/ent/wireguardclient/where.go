// Code generated by entc, DO NOT EDIT.

package wireguardclient

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/boxjan/misc/pkg/knock/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DestroyedAt applies equality check predicate on the "destroyed_at" field. It's identical to DestroyedAtEQ.
func DestroyedAt(v time.Time) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDestroyedAt), v))
	})
}

// Expired applies equality check predicate on the "expired" field. It's identical to ExpiredEQ.
func Expired(v bool) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpired), v))
	})
}

// Identify applies equality check predicate on the "identify" field. It's identical to IdentifyEQ.
func Identify(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIdentify), v))
	})
}

// ServerPrivateKey applies equality check predicate on the "server_private_key" field. It's identical to ServerPrivateKeyEQ.
func ServerPrivateKey(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldServerPrivateKey), v))
	})
}

// ClientPrivateKey applies equality check predicate on the "client_private_key" field. It's identical to ClientPrivateKeyEQ.
func ClientPrivateKey(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClientPrivateKey), v))
	})
}

// NetifName applies equality check predicate on the "netif_name" field. It's identical to NetifNameEQ.
func NetifName(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNetifName), v))
	})
}

// PeerAddr applies equality check predicate on the "peer_addr" field. It's identical to PeerAddrEQ.
func PeerAddr(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPeerAddr), v))
	})
}

// ListenAddr applies equality check predicate on the "listen_addr" field. It's identical to ListenAddrEQ.
func ListenAddr(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldListenAddr), v))
	})
}

// AllocCidr applies equality check predicate on the "alloc_cidr" field. It's identical to AllocCidrEQ.
func AllocCidr(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAllocCidr), v))
	})
}

// ServerAddress applies equality check predicate on the "server_address" field. It's identical to ServerAddressEQ.
func ServerAddress(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldServerAddress), v))
	})
}

// ClientAddress applies equality check predicate on the "client_address" field. It's identical to ClientAddressEQ.
func ClientAddress(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClientAddress), v))
	})
}

// ReceiveBytes applies equality check predicate on the "receive_bytes" field. It's identical to ReceiveBytesEQ.
func ReceiveBytes(v uint64) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceiveBytes), v))
	})
}

// TransmitBytes applies equality check predicate on the "transmit_bytes" field. It's identical to TransmitBytesEQ.
func TransmitBytes(v uint64) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransmitBytes), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.WireguardClient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WireguardClient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.WireguardClient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WireguardClient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.WireguardClient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WireguardClient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.WireguardClient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WireguardClient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DestroyedAtEQ applies the EQ predicate on the "destroyed_at" field.
func DestroyedAtEQ(v time.Time) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDestroyedAt), v))
	})
}

// DestroyedAtNEQ applies the NEQ predicate on the "destroyed_at" field.
func DestroyedAtNEQ(v time.Time) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDestroyedAt), v))
	})
}

// DestroyedAtIn applies the In predicate on the "destroyed_at" field.
func DestroyedAtIn(vs ...time.Time) predicate.WireguardClient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WireguardClient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDestroyedAt), v...))
	})
}

// DestroyedAtNotIn applies the NotIn predicate on the "destroyed_at" field.
func DestroyedAtNotIn(vs ...time.Time) predicate.WireguardClient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WireguardClient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDestroyedAt), v...))
	})
}

// DestroyedAtGT applies the GT predicate on the "destroyed_at" field.
func DestroyedAtGT(v time.Time) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDestroyedAt), v))
	})
}

// DestroyedAtGTE applies the GTE predicate on the "destroyed_at" field.
func DestroyedAtGTE(v time.Time) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDestroyedAt), v))
	})
}

// DestroyedAtLT applies the LT predicate on the "destroyed_at" field.
func DestroyedAtLT(v time.Time) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDestroyedAt), v))
	})
}

// DestroyedAtLTE applies the LTE predicate on the "destroyed_at" field.
func DestroyedAtLTE(v time.Time) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDestroyedAt), v))
	})
}

// ExpiredEQ applies the EQ predicate on the "expired" field.
func ExpiredEQ(v bool) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpired), v))
	})
}

// ExpiredNEQ applies the NEQ predicate on the "expired" field.
func ExpiredNEQ(v bool) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExpired), v))
	})
}

// IdentifyEQ applies the EQ predicate on the "identify" field.
func IdentifyEQ(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIdentify), v))
	})
}

// IdentifyNEQ applies the NEQ predicate on the "identify" field.
func IdentifyNEQ(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIdentify), v))
	})
}

// IdentifyIn applies the In predicate on the "identify" field.
func IdentifyIn(vs ...string) predicate.WireguardClient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WireguardClient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIdentify), v...))
	})
}

// IdentifyNotIn applies the NotIn predicate on the "identify" field.
func IdentifyNotIn(vs ...string) predicate.WireguardClient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WireguardClient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIdentify), v...))
	})
}

// IdentifyGT applies the GT predicate on the "identify" field.
func IdentifyGT(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIdentify), v))
	})
}

// IdentifyGTE applies the GTE predicate on the "identify" field.
func IdentifyGTE(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIdentify), v))
	})
}

// IdentifyLT applies the LT predicate on the "identify" field.
func IdentifyLT(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIdentify), v))
	})
}

// IdentifyLTE applies the LTE predicate on the "identify" field.
func IdentifyLTE(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIdentify), v))
	})
}

// IdentifyContains applies the Contains predicate on the "identify" field.
func IdentifyContains(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIdentify), v))
	})
}

// IdentifyHasPrefix applies the HasPrefix predicate on the "identify" field.
func IdentifyHasPrefix(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIdentify), v))
	})
}

// IdentifyHasSuffix applies the HasSuffix predicate on the "identify" field.
func IdentifyHasSuffix(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIdentify), v))
	})
}

// IdentifyEqualFold applies the EqualFold predicate on the "identify" field.
func IdentifyEqualFold(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIdentify), v))
	})
}

// IdentifyContainsFold applies the ContainsFold predicate on the "identify" field.
func IdentifyContainsFold(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIdentify), v))
	})
}

// ServerPrivateKeyEQ applies the EQ predicate on the "server_private_key" field.
func ServerPrivateKeyEQ(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldServerPrivateKey), v))
	})
}

// ServerPrivateKeyNEQ applies the NEQ predicate on the "server_private_key" field.
func ServerPrivateKeyNEQ(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldServerPrivateKey), v))
	})
}

// ServerPrivateKeyIn applies the In predicate on the "server_private_key" field.
func ServerPrivateKeyIn(vs ...string) predicate.WireguardClient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WireguardClient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldServerPrivateKey), v...))
	})
}

// ServerPrivateKeyNotIn applies the NotIn predicate on the "server_private_key" field.
func ServerPrivateKeyNotIn(vs ...string) predicate.WireguardClient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WireguardClient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldServerPrivateKey), v...))
	})
}

// ServerPrivateKeyGT applies the GT predicate on the "server_private_key" field.
func ServerPrivateKeyGT(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldServerPrivateKey), v))
	})
}

// ServerPrivateKeyGTE applies the GTE predicate on the "server_private_key" field.
func ServerPrivateKeyGTE(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldServerPrivateKey), v))
	})
}

// ServerPrivateKeyLT applies the LT predicate on the "server_private_key" field.
func ServerPrivateKeyLT(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldServerPrivateKey), v))
	})
}

// ServerPrivateKeyLTE applies the LTE predicate on the "server_private_key" field.
func ServerPrivateKeyLTE(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldServerPrivateKey), v))
	})
}

// ServerPrivateKeyContains applies the Contains predicate on the "server_private_key" field.
func ServerPrivateKeyContains(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldServerPrivateKey), v))
	})
}

// ServerPrivateKeyHasPrefix applies the HasPrefix predicate on the "server_private_key" field.
func ServerPrivateKeyHasPrefix(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldServerPrivateKey), v))
	})
}

// ServerPrivateKeyHasSuffix applies the HasSuffix predicate on the "server_private_key" field.
func ServerPrivateKeyHasSuffix(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldServerPrivateKey), v))
	})
}

// ServerPrivateKeyEqualFold applies the EqualFold predicate on the "server_private_key" field.
func ServerPrivateKeyEqualFold(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldServerPrivateKey), v))
	})
}

// ServerPrivateKeyContainsFold applies the ContainsFold predicate on the "server_private_key" field.
func ServerPrivateKeyContainsFold(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldServerPrivateKey), v))
	})
}

// ClientPrivateKeyEQ applies the EQ predicate on the "client_private_key" field.
func ClientPrivateKeyEQ(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClientPrivateKey), v))
	})
}

// ClientPrivateKeyNEQ applies the NEQ predicate on the "client_private_key" field.
func ClientPrivateKeyNEQ(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClientPrivateKey), v))
	})
}

// ClientPrivateKeyIn applies the In predicate on the "client_private_key" field.
func ClientPrivateKeyIn(vs ...string) predicate.WireguardClient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WireguardClient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldClientPrivateKey), v...))
	})
}

// ClientPrivateKeyNotIn applies the NotIn predicate on the "client_private_key" field.
func ClientPrivateKeyNotIn(vs ...string) predicate.WireguardClient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WireguardClient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldClientPrivateKey), v...))
	})
}

// ClientPrivateKeyGT applies the GT predicate on the "client_private_key" field.
func ClientPrivateKeyGT(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClientPrivateKey), v))
	})
}

// ClientPrivateKeyGTE applies the GTE predicate on the "client_private_key" field.
func ClientPrivateKeyGTE(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClientPrivateKey), v))
	})
}

// ClientPrivateKeyLT applies the LT predicate on the "client_private_key" field.
func ClientPrivateKeyLT(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClientPrivateKey), v))
	})
}

// ClientPrivateKeyLTE applies the LTE predicate on the "client_private_key" field.
func ClientPrivateKeyLTE(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClientPrivateKey), v))
	})
}

// ClientPrivateKeyContains applies the Contains predicate on the "client_private_key" field.
func ClientPrivateKeyContains(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldClientPrivateKey), v))
	})
}

// ClientPrivateKeyHasPrefix applies the HasPrefix predicate on the "client_private_key" field.
func ClientPrivateKeyHasPrefix(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldClientPrivateKey), v))
	})
}

// ClientPrivateKeyHasSuffix applies the HasSuffix predicate on the "client_private_key" field.
func ClientPrivateKeyHasSuffix(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldClientPrivateKey), v))
	})
}

// ClientPrivateKeyEqualFold applies the EqualFold predicate on the "client_private_key" field.
func ClientPrivateKeyEqualFold(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldClientPrivateKey), v))
	})
}

// ClientPrivateKeyContainsFold applies the ContainsFold predicate on the "client_private_key" field.
func ClientPrivateKeyContainsFold(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldClientPrivateKey), v))
	})
}

// NetifNameEQ applies the EQ predicate on the "netif_name" field.
func NetifNameEQ(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNetifName), v))
	})
}

// NetifNameNEQ applies the NEQ predicate on the "netif_name" field.
func NetifNameNEQ(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNetifName), v))
	})
}

// NetifNameIn applies the In predicate on the "netif_name" field.
func NetifNameIn(vs ...string) predicate.WireguardClient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WireguardClient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNetifName), v...))
	})
}

// NetifNameNotIn applies the NotIn predicate on the "netif_name" field.
func NetifNameNotIn(vs ...string) predicate.WireguardClient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WireguardClient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNetifName), v...))
	})
}

// NetifNameGT applies the GT predicate on the "netif_name" field.
func NetifNameGT(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNetifName), v))
	})
}

// NetifNameGTE applies the GTE predicate on the "netif_name" field.
func NetifNameGTE(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNetifName), v))
	})
}

// NetifNameLT applies the LT predicate on the "netif_name" field.
func NetifNameLT(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNetifName), v))
	})
}

// NetifNameLTE applies the LTE predicate on the "netif_name" field.
func NetifNameLTE(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNetifName), v))
	})
}

// NetifNameContains applies the Contains predicate on the "netif_name" field.
func NetifNameContains(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNetifName), v))
	})
}

// NetifNameHasPrefix applies the HasPrefix predicate on the "netif_name" field.
func NetifNameHasPrefix(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNetifName), v))
	})
}

// NetifNameHasSuffix applies the HasSuffix predicate on the "netif_name" field.
func NetifNameHasSuffix(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNetifName), v))
	})
}

// NetifNameEqualFold applies the EqualFold predicate on the "netif_name" field.
func NetifNameEqualFold(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNetifName), v))
	})
}

// NetifNameContainsFold applies the ContainsFold predicate on the "netif_name" field.
func NetifNameContainsFold(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNetifName), v))
	})
}

// PeerAddrEQ applies the EQ predicate on the "peer_addr" field.
func PeerAddrEQ(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPeerAddr), v))
	})
}

// PeerAddrNEQ applies the NEQ predicate on the "peer_addr" field.
func PeerAddrNEQ(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPeerAddr), v))
	})
}

// PeerAddrIn applies the In predicate on the "peer_addr" field.
func PeerAddrIn(vs ...string) predicate.WireguardClient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WireguardClient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPeerAddr), v...))
	})
}

// PeerAddrNotIn applies the NotIn predicate on the "peer_addr" field.
func PeerAddrNotIn(vs ...string) predicate.WireguardClient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WireguardClient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPeerAddr), v...))
	})
}

// PeerAddrGT applies the GT predicate on the "peer_addr" field.
func PeerAddrGT(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPeerAddr), v))
	})
}

// PeerAddrGTE applies the GTE predicate on the "peer_addr" field.
func PeerAddrGTE(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPeerAddr), v))
	})
}

// PeerAddrLT applies the LT predicate on the "peer_addr" field.
func PeerAddrLT(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPeerAddr), v))
	})
}

// PeerAddrLTE applies the LTE predicate on the "peer_addr" field.
func PeerAddrLTE(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPeerAddr), v))
	})
}

// PeerAddrContains applies the Contains predicate on the "peer_addr" field.
func PeerAddrContains(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPeerAddr), v))
	})
}

// PeerAddrHasPrefix applies the HasPrefix predicate on the "peer_addr" field.
func PeerAddrHasPrefix(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPeerAddr), v))
	})
}

// PeerAddrHasSuffix applies the HasSuffix predicate on the "peer_addr" field.
func PeerAddrHasSuffix(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPeerAddr), v))
	})
}

// PeerAddrEqualFold applies the EqualFold predicate on the "peer_addr" field.
func PeerAddrEqualFold(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPeerAddr), v))
	})
}

// PeerAddrContainsFold applies the ContainsFold predicate on the "peer_addr" field.
func PeerAddrContainsFold(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPeerAddr), v))
	})
}

// ListenAddrEQ applies the EQ predicate on the "listen_addr" field.
func ListenAddrEQ(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldListenAddr), v))
	})
}

// ListenAddrNEQ applies the NEQ predicate on the "listen_addr" field.
func ListenAddrNEQ(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldListenAddr), v))
	})
}

// ListenAddrIn applies the In predicate on the "listen_addr" field.
func ListenAddrIn(vs ...string) predicate.WireguardClient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WireguardClient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldListenAddr), v...))
	})
}

// ListenAddrNotIn applies the NotIn predicate on the "listen_addr" field.
func ListenAddrNotIn(vs ...string) predicate.WireguardClient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WireguardClient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldListenAddr), v...))
	})
}

// ListenAddrGT applies the GT predicate on the "listen_addr" field.
func ListenAddrGT(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldListenAddr), v))
	})
}

// ListenAddrGTE applies the GTE predicate on the "listen_addr" field.
func ListenAddrGTE(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldListenAddr), v))
	})
}

// ListenAddrLT applies the LT predicate on the "listen_addr" field.
func ListenAddrLT(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldListenAddr), v))
	})
}

// ListenAddrLTE applies the LTE predicate on the "listen_addr" field.
func ListenAddrLTE(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldListenAddr), v))
	})
}

// ListenAddrContains applies the Contains predicate on the "listen_addr" field.
func ListenAddrContains(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldListenAddr), v))
	})
}

// ListenAddrHasPrefix applies the HasPrefix predicate on the "listen_addr" field.
func ListenAddrHasPrefix(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldListenAddr), v))
	})
}

// ListenAddrHasSuffix applies the HasSuffix predicate on the "listen_addr" field.
func ListenAddrHasSuffix(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldListenAddr), v))
	})
}

// ListenAddrEqualFold applies the EqualFold predicate on the "listen_addr" field.
func ListenAddrEqualFold(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldListenAddr), v))
	})
}

// ListenAddrContainsFold applies the ContainsFold predicate on the "listen_addr" field.
func ListenAddrContainsFold(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldListenAddr), v))
	})
}

// AllocCidrEQ applies the EQ predicate on the "alloc_cidr" field.
func AllocCidrEQ(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAllocCidr), v))
	})
}

// AllocCidrNEQ applies the NEQ predicate on the "alloc_cidr" field.
func AllocCidrNEQ(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAllocCidr), v))
	})
}

// AllocCidrIn applies the In predicate on the "alloc_cidr" field.
func AllocCidrIn(vs ...string) predicate.WireguardClient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WireguardClient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAllocCidr), v...))
	})
}

// AllocCidrNotIn applies the NotIn predicate on the "alloc_cidr" field.
func AllocCidrNotIn(vs ...string) predicate.WireguardClient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WireguardClient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAllocCidr), v...))
	})
}

// AllocCidrGT applies the GT predicate on the "alloc_cidr" field.
func AllocCidrGT(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAllocCidr), v))
	})
}

// AllocCidrGTE applies the GTE predicate on the "alloc_cidr" field.
func AllocCidrGTE(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAllocCidr), v))
	})
}

// AllocCidrLT applies the LT predicate on the "alloc_cidr" field.
func AllocCidrLT(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAllocCidr), v))
	})
}

// AllocCidrLTE applies the LTE predicate on the "alloc_cidr" field.
func AllocCidrLTE(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAllocCidr), v))
	})
}

// AllocCidrContains applies the Contains predicate on the "alloc_cidr" field.
func AllocCidrContains(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAllocCidr), v))
	})
}

// AllocCidrHasPrefix applies the HasPrefix predicate on the "alloc_cidr" field.
func AllocCidrHasPrefix(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAllocCidr), v))
	})
}

// AllocCidrHasSuffix applies the HasSuffix predicate on the "alloc_cidr" field.
func AllocCidrHasSuffix(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAllocCidr), v))
	})
}

// AllocCidrEqualFold applies the EqualFold predicate on the "alloc_cidr" field.
func AllocCidrEqualFold(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAllocCidr), v))
	})
}

// AllocCidrContainsFold applies the ContainsFold predicate on the "alloc_cidr" field.
func AllocCidrContainsFold(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAllocCidr), v))
	})
}

// ServerAddressEQ applies the EQ predicate on the "server_address" field.
func ServerAddressEQ(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldServerAddress), v))
	})
}

// ServerAddressNEQ applies the NEQ predicate on the "server_address" field.
func ServerAddressNEQ(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldServerAddress), v))
	})
}

// ServerAddressIn applies the In predicate on the "server_address" field.
func ServerAddressIn(vs ...string) predicate.WireguardClient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WireguardClient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldServerAddress), v...))
	})
}

// ServerAddressNotIn applies the NotIn predicate on the "server_address" field.
func ServerAddressNotIn(vs ...string) predicate.WireguardClient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WireguardClient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldServerAddress), v...))
	})
}

// ServerAddressGT applies the GT predicate on the "server_address" field.
func ServerAddressGT(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldServerAddress), v))
	})
}

// ServerAddressGTE applies the GTE predicate on the "server_address" field.
func ServerAddressGTE(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldServerAddress), v))
	})
}

// ServerAddressLT applies the LT predicate on the "server_address" field.
func ServerAddressLT(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldServerAddress), v))
	})
}

// ServerAddressLTE applies the LTE predicate on the "server_address" field.
func ServerAddressLTE(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldServerAddress), v))
	})
}

// ServerAddressContains applies the Contains predicate on the "server_address" field.
func ServerAddressContains(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldServerAddress), v))
	})
}

// ServerAddressHasPrefix applies the HasPrefix predicate on the "server_address" field.
func ServerAddressHasPrefix(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldServerAddress), v))
	})
}

// ServerAddressHasSuffix applies the HasSuffix predicate on the "server_address" field.
func ServerAddressHasSuffix(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldServerAddress), v))
	})
}

// ServerAddressEqualFold applies the EqualFold predicate on the "server_address" field.
func ServerAddressEqualFold(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldServerAddress), v))
	})
}

// ServerAddressContainsFold applies the ContainsFold predicate on the "server_address" field.
func ServerAddressContainsFold(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldServerAddress), v))
	})
}

// ClientAddressEQ applies the EQ predicate on the "client_address" field.
func ClientAddressEQ(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClientAddress), v))
	})
}

// ClientAddressNEQ applies the NEQ predicate on the "client_address" field.
func ClientAddressNEQ(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClientAddress), v))
	})
}

// ClientAddressIn applies the In predicate on the "client_address" field.
func ClientAddressIn(vs ...string) predicate.WireguardClient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WireguardClient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldClientAddress), v...))
	})
}

// ClientAddressNotIn applies the NotIn predicate on the "client_address" field.
func ClientAddressNotIn(vs ...string) predicate.WireguardClient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WireguardClient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldClientAddress), v...))
	})
}

// ClientAddressGT applies the GT predicate on the "client_address" field.
func ClientAddressGT(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClientAddress), v))
	})
}

// ClientAddressGTE applies the GTE predicate on the "client_address" field.
func ClientAddressGTE(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClientAddress), v))
	})
}

// ClientAddressLT applies the LT predicate on the "client_address" field.
func ClientAddressLT(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClientAddress), v))
	})
}

// ClientAddressLTE applies the LTE predicate on the "client_address" field.
func ClientAddressLTE(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClientAddress), v))
	})
}

// ClientAddressContains applies the Contains predicate on the "client_address" field.
func ClientAddressContains(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldClientAddress), v))
	})
}

// ClientAddressHasPrefix applies the HasPrefix predicate on the "client_address" field.
func ClientAddressHasPrefix(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldClientAddress), v))
	})
}

// ClientAddressHasSuffix applies the HasSuffix predicate on the "client_address" field.
func ClientAddressHasSuffix(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldClientAddress), v))
	})
}

// ClientAddressEqualFold applies the EqualFold predicate on the "client_address" field.
func ClientAddressEqualFold(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldClientAddress), v))
	})
}

// ClientAddressContainsFold applies the ContainsFold predicate on the "client_address" field.
func ClientAddressContainsFold(v string) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldClientAddress), v))
	})
}

// ReceiveBytesEQ applies the EQ predicate on the "receive_bytes" field.
func ReceiveBytesEQ(v uint64) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceiveBytes), v))
	})
}

// ReceiveBytesNEQ applies the NEQ predicate on the "receive_bytes" field.
func ReceiveBytesNEQ(v uint64) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReceiveBytes), v))
	})
}

// ReceiveBytesIn applies the In predicate on the "receive_bytes" field.
func ReceiveBytesIn(vs ...uint64) predicate.WireguardClient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WireguardClient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReceiveBytes), v...))
	})
}

// ReceiveBytesNotIn applies the NotIn predicate on the "receive_bytes" field.
func ReceiveBytesNotIn(vs ...uint64) predicate.WireguardClient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WireguardClient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReceiveBytes), v...))
	})
}

// ReceiveBytesGT applies the GT predicate on the "receive_bytes" field.
func ReceiveBytesGT(v uint64) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReceiveBytes), v))
	})
}

// ReceiveBytesGTE applies the GTE predicate on the "receive_bytes" field.
func ReceiveBytesGTE(v uint64) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReceiveBytes), v))
	})
}

// ReceiveBytesLT applies the LT predicate on the "receive_bytes" field.
func ReceiveBytesLT(v uint64) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReceiveBytes), v))
	})
}

// ReceiveBytesLTE applies the LTE predicate on the "receive_bytes" field.
func ReceiveBytesLTE(v uint64) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReceiveBytes), v))
	})
}

// TransmitBytesEQ applies the EQ predicate on the "transmit_bytes" field.
func TransmitBytesEQ(v uint64) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransmitBytes), v))
	})
}

// TransmitBytesNEQ applies the NEQ predicate on the "transmit_bytes" field.
func TransmitBytesNEQ(v uint64) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTransmitBytes), v))
	})
}

// TransmitBytesIn applies the In predicate on the "transmit_bytes" field.
func TransmitBytesIn(vs ...uint64) predicate.WireguardClient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WireguardClient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTransmitBytes), v...))
	})
}

// TransmitBytesNotIn applies the NotIn predicate on the "transmit_bytes" field.
func TransmitBytesNotIn(vs ...uint64) predicate.WireguardClient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WireguardClient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTransmitBytes), v...))
	})
}

// TransmitBytesGT applies the GT predicate on the "transmit_bytes" field.
func TransmitBytesGT(v uint64) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTransmitBytes), v))
	})
}

// TransmitBytesGTE applies the GTE predicate on the "transmit_bytes" field.
func TransmitBytesGTE(v uint64) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTransmitBytes), v))
	})
}

// TransmitBytesLT applies the LT predicate on the "transmit_bytes" field.
func TransmitBytesLT(v uint64) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTransmitBytes), v))
	})
}

// TransmitBytesLTE applies the LTE predicate on the "transmit_bytes" field.
func TransmitBytesLTE(v uint64) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTransmitBytes), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WireguardClient) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WireguardClient) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WireguardClient) predicate.WireguardClient {
	return predicate.WireguardClient(func(s *sql.Selector) {
		p(s.Not())
	})
}
