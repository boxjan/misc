// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/boxjan/misc/pkg/knock/ent/wireguardclient"
)

// WireguardClientCreate is the builder for creating a WireguardClient entity.
type WireguardClientCreate struct {
	config
	mutation *WireguardClientMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (wcc *WireguardClientCreate) SetCreatedAt(t time.Time) *WireguardClientCreate {
	wcc.mutation.SetCreatedAt(t)
	return wcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wcc *WireguardClientCreate) SetNillableCreatedAt(t *time.Time) *WireguardClientCreate {
	if t != nil {
		wcc.SetCreatedAt(*t)
	}
	return wcc
}

// SetUpdatedAt sets the "updated_at" field.
func (wcc *WireguardClientCreate) SetUpdatedAt(t time.Time) *WireguardClientCreate {
	wcc.mutation.SetUpdatedAt(t)
	return wcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wcc *WireguardClientCreate) SetNillableUpdatedAt(t *time.Time) *WireguardClientCreate {
	if t != nil {
		wcc.SetUpdatedAt(*t)
	}
	return wcc
}

// SetDestroyedAt sets the "destroyed_at" field.
func (wcc *WireguardClientCreate) SetDestroyedAt(t time.Time) *WireguardClientCreate {
	wcc.mutation.SetDestroyedAt(t)
	return wcc
}

// SetNillableDestroyedAt sets the "destroyed_at" field if the given value is not nil.
func (wcc *WireguardClientCreate) SetNillableDestroyedAt(t *time.Time) *WireguardClientCreate {
	if t != nil {
		wcc.SetDestroyedAt(*t)
	}
	return wcc
}

// SetExpired sets the "expired" field.
func (wcc *WireguardClientCreate) SetExpired(b bool) *WireguardClientCreate {
	wcc.mutation.SetExpired(b)
	return wcc
}

// SetNillableExpired sets the "expired" field if the given value is not nil.
func (wcc *WireguardClientCreate) SetNillableExpired(b *bool) *WireguardClientCreate {
	if b != nil {
		wcc.SetExpired(*b)
	}
	return wcc
}

// SetIdentify sets the "identify" field.
func (wcc *WireguardClientCreate) SetIdentify(s string) *WireguardClientCreate {
	wcc.mutation.SetIdentify(s)
	return wcc
}

// SetNillableIdentify sets the "identify" field if the given value is not nil.
func (wcc *WireguardClientCreate) SetNillableIdentify(s *string) *WireguardClientCreate {
	if s != nil {
		wcc.SetIdentify(*s)
	}
	return wcc
}

// SetServerPrivateKey sets the "server_private_key" field.
func (wcc *WireguardClientCreate) SetServerPrivateKey(s string) *WireguardClientCreate {
	wcc.mutation.SetServerPrivateKey(s)
	return wcc
}

// SetClientPrivateKey sets the "client_private_key" field.
func (wcc *WireguardClientCreate) SetClientPrivateKey(s string) *WireguardClientCreate {
	wcc.mutation.SetClientPrivateKey(s)
	return wcc
}

// SetNetifName sets the "netif_name" field.
func (wcc *WireguardClientCreate) SetNetifName(s string) *WireguardClientCreate {
	wcc.mutation.SetNetifName(s)
	return wcc
}

// SetPeerAddr sets the "peer_addr" field.
func (wcc *WireguardClientCreate) SetPeerAddr(s string) *WireguardClientCreate {
	wcc.mutation.SetPeerAddr(s)
	return wcc
}

// SetListenAddr sets the "listen_addr" field.
func (wcc *WireguardClientCreate) SetListenAddr(s string) *WireguardClientCreate {
	wcc.mutation.SetListenAddr(s)
	return wcc
}

// SetAllocCidr sets the "alloc_cidr" field.
func (wcc *WireguardClientCreate) SetAllocCidr(s string) *WireguardClientCreate {
	wcc.mutation.SetAllocCidr(s)
	return wcc
}

// SetServerAddress sets the "server_address" field.
func (wcc *WireguardClientCreate) SetServerAddress(s string) *WireguardClientCreate {
	wcc.mutation.SetServerAddress(s)
	return wcc
}

// SetClientAddress sets the "client_address" field.
func (wcc *WireguardClientCreate) SetClientAddress(s string) *WireguardClientCreate {
	wcc.mutation.SetClientAddress(s)
	return wcc
}

// SetReceiveBytes sets the "receive_bytes" field.
func (wcc *WireguardClientCreate) SetReceiveBytes(u uint64) *WireguardClientCreate {
	wcc.mutation.SetReceiveBytes(u)
	return wcc
}

// SetTransmitBytes sets the "transmit_bytes" field.
func (wcc *WireguardClientCreate) SetTransmitBytes(u uint64) *WireguardClientCreate {
	wcc.mutation.SetTransmitBytes(u)
	return wcc
}

// Mutation returns the WireguardClientMutation object of the builder.
func (wcc *WireguardClientCreate) Mutation() *WireguardClientMutation {
	return wcc.mutation
}

// Save creates the WireguardClient in the database.
func (wcc *WireguardClientCreate) Save(ctx context.Context) (*WireguardClient, error) {
	var (
		err  error
		node *WireguardClient
	)
	wcc.defaults()
	if len(wcc.hooks) == 0 {
		if err = wcc.check(); err != nil {
			return nil, err
		}
		node, err = wcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WireguardClientMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wcc.check(); err != nil {
				return nil, err
			}
			wcc.mutation = mutation
			if node, err = wcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(wcc.hooks) - 1; i >= 0; i-- {
			if wcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = wcc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wcc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (wcc *WireguardClientCreate) SaveX(ctx context.Context) *WireguardClient {
	v, err := wcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wcc *WireguardClientCreate) Exec(ctx context.Context) error {
	_, err := wcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcc *WireguardClientCreate) ExecX(ctx context.Context) {
	if err := wcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wcc *WireguardClientCreate) defaults() {
	if _, ok := wcc.mutation.CreatedAt(); !ok {
		v := wireguardclient.DefaultCreatedAt()
		wcc.mutation.SetCreatedAt(v)
	}
	if _, ok := wcc.mutation.UpdatedAt(); !ok {
		v := wireguardclient.DefaultUpdatedAt()
		wcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := wcc.mutation.DestroyedAt(); !ok {
		v := wireguardclient.DefaultDestroyedAt()
		wcc.mutation.SetDestroyedAt(v)
	}
	if _, ok := wcc.mutation.Expired(); !ok {
		v := wireguardclient.DefaultExpired
		wcc.mutation.SetExpired(v)
	}
	if _, ok := wcc.mutation.Identify(); !ok {
		v := wireguardclient.DefaultIdentify
		wcc.mutation.SetIdentify(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wcc *WireguardClientCreate) check() error {
	if _, ok := wcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "WireguardClient.created_at"`)}
	}
	if _, ok := wcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "WireguardClient.updated_at"`)}
	}
	if _, ok := wcc.mutation.DestroyedAt(); !ok {
		return &ValidationError{Name: "destroyed_at", err: errors.New(`ent: missing required field "WireguardClient.destroyed_at"`)}
	}
	if _, ok := wcc.mutation.Expired(); !ok {
		return &ValidationError{Name: "expired", err: errors.New(`ent: missing required field "WireguardClient.expired"`)}
	}
	if _, ok := wcc.mutation.Identify(); !ok {
		return &ValidationError{Name: "identify", err: errors.New(`ent: missing required field "WireguardClient.identify"`)}
	}
	if v, ok := wcc.mutation.Identify(); ok {
		if err := wireguardclient.IdentifyValidator(v); err != nil {
			return &ValidationError{Name: "identify", err: fmt.Errorf(`ent: validator failed for field "WireguardClient.identify": %w`, err)}
		}
	}
	if _, ok := wcc.mutation.ServerPrivateKey(); !ok {
		return &ValidationError{Name: "server_private_key", err: errors.New(`ent: missing required field "WireguardClient.server_private_key"`)}
	}
	if v, ok := wcc.mutation.ServerPrivateKey(); ok {
		if err := wireguardclient.ServerPrivateKeyValidator(v); err != nil {
			return &ValidationError{Name: "server_private_key", err: fmt.Errorf(`ent: validator failed for field "WireguardClient.server_private_key": %w`, err)}
		}
	}
	if _, ok := wcc.mutation.ClientPrivateKey(); !ok {
		return &ValidationError{Name: "client_private_key", err: errors.New(`ent: missing required field "WireguardClient.client_private_key"`)}
	}
	if v, ok := wcc.mutation.ClientPrivateKey(); ok {
		if err := wireguardclient.ClientPrivateKeyValidator(v); err != nil {
			return &ValidationError{Name: "client_private_key", err: fmt.Errorf(`ent: validator failed for field "WireguardClient.client_private_key": %w`, err)}
		}
	}
	if _, ok := wcc.mutation.NetifName(); !ok {
		return &ValidationError{Name: "netif_name", err: errors.New(`ent: missing required field "WireguardClient.netif_name"`)}
	}
	if v, ok := wcc.mutation.NetifName(); ok {
		if err := wireguardclient.NetifNameValidator(v); err != nil {
			return &ValidationError{Name: "netif_name", err: fmt.Errorf(`ent: validator failed for field "WireguardClient.netif_name": %w`, err)}
		}
	}
	if _, ok := wcc.mutation.PeerAddr(); !ok {
		return &ValidationError{Name: "peer_addr", err: errors.New(`ent: missing required field "WireguardClient.peer_addr"`)}
	}
	if _, ok := wcc.mutation.ListenAddr(); !ok {
		return &ValidationError{Name: "listen_addr", err: errors.New(`ent: missing required field "WireguardClient.listen_addr"`)}
	}
	if v, ok := wcc.mutation.ListenAddr(); ok {
		if err := wireguardclient.ListenAddrValidator(v); err != nil {
			return &ValidationError{Name: "listen_addr", err: fmt.Errorf(`ent: validator failed for field "WireguardClient.listen_addr": %w`, err)}
		}
	}
	if _, ok := wcc.mutation.AllocCidr(); !ok {
		return &ValidationError{Name: "alloc_cidr", err: errors.New(`ent: missing required field "WireguardClient.alloc_cidr"`)}
	}
	if v, ok := wcc.mutation.AllocCidr(); ok {
		if err := wireguardclient.AllocCidrValidator(v); err != nil {
			return &ValidationError{Name: "alloc_cidr", err: fmt.Errorf(`ent: validator failed for field "WireguardClient.alloc_cidr": %w`, err)}
		}
	}
	if _, ok := wcc.mutation.ServerAddress(); !ok {
		return &ValidationError{Name: "server_address", err: errors.New(`ent: missing required field "WireguardClient.server_address"`)}
	}
	if v, ok := wcc.mutation.ServerAddress(); ok {
		if err := wireguardclient.ServerAddressValidator(v); err != nil {
			return &ValidationError{Name: "server_address", err: fmt.Errorf(`ent: validator failed for field "WireguardClient.server_address": %w`, err)}
		}
	}
	if _, ok := wcc.mutation.ClientAddress(); !ok {
		return &ValidationError{Name: "client_address", err: errors.New(`ent: missing required field "WireguardClient.client_address"`)}
	}
	if v, ok := wcc.mutation.ClientAddress(); ok {
		if err := wireguardclient.ClientAddressValidator(v); err != nil {
			return &ValidationError{Name: "client_address", err: fmt.Errorf(`ent: validator failed for field "WireguardClient.client_address": %w`, err)}
		}
	}
	if _, ok := wcc.mutation.ReceiveBytes(); !ok {
		return &ValidationError{Name: "receive_bytes", err: errors.New(`ent: missing required field "WireguardClient.receive_bytes"`)}
	}
	if _, ok := wcc.mutation.TransmitBytes(); !ok {
		return &ValidationError{Name: "transmit_bytes", err: errors.New(`ent: missing required field "WireguardClient.transmit_bytes"`)}
	}
	return nil
}

func (wcc *WireguardClientCreate) sqlSave(ctx context.Context) (*WireguardClient, error) {
	_node, _spec := wcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (wcc *WireguardClientCreate) createSpec() (*WireguardClient, *sqlgraph.CreateSpec) {
	var (
		_node = &WireguardClient{config: wcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: wireguardclient.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: wireguardclient.FieldID,
			},
		}
	)
	if value, ok := wcc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: wireguardclient.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := wcc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: wireguardclient.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := wcc.mutation.DestroyedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: wireguardclient.FieldDestroyedAt,
		})
		_node.DestroyedAt = value
	}
	if value, ok := wcc.mutation.Expired(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: wireguardclient.FieldExpired,
		})
		_node.Expired = value
	}
	if value, ok := wcc.mutation.Identify(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wireguardclient.FieldIdentify,
		})
		_node.Identify = value
	}
	if value, ok := wcc.mutation.ServerPrivateKey(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wireguardclient.FieldServerPrivateKey,
		})
		_node.ServerPrivateKey = value
	}
	if value, ok := wcc.mutation.ClientPrivateKey(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wireguardclient.FieldClientPrivateKey,
		})
		_node.ClientPrivateKey = value
	}
	if value, ok := wcc.mutation.NetifName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wireguardclient.FieldNetifName,
		})
		_node.NetifName = value
	}
	if value, ok := wcc.mutation.PeerAddr(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wireguardclient.FieldPeerAddr,
		})
		_node.PeerAddr = value
	}
	if value, ok := wcc.mutation.ListenAddr(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wireguardclient.FieldListenAddr,
		})
		_node.ListenAddr = value
	}
	if value, ok := wcc.mutation.AllocCidr(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wireguardclient.FieldAllocCidr,
		})
		_node.AllocCidr = value
	}
	if value, ok := wcc.mutation.ServerAddress(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wireguardclient.FieldServerAddress,
		})
		_node.ServerAddress = value
	}
	if value, ok := wcc.mutation.ClientAddress(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wireguardclient.FieldClientAddress,
		})
		_node.ClientAddress = value
	}
	if value, ok := wcc.mutation.ReceiveBytes(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: wireguardclient.FieldReceiveBytes,
		})
		_node.ReceiveBytes = value
	}
	if value, ok := wcc.mutation.TransmitBytes(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: wireguardclient.FieldTransmitBytes,
		})
		_node.TransmitBytes = value
	}
	return _node, _spec
}

// WireguardClientCreateBulk is the builder for creating many WireguardClient entities in bulk.
type WireguardClientCreateBulk struct {
	config
	builders []*WireguardClientCreate
}

// Save creates the WireguardClient entities in the database.
func (wccb *WireguardClientCreateBulk) Save(ctx context.Context) ([]*WireguardClient, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wccb.builders))
	nodes := make([]*WireguardClient, len(wccb.builders))
	mutators := make([]Mutator, len(wccb.builders))
	for i := range wccb.builders {
		func(i int, root context.Context) {
			builder := wccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WireguardClientMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wccb *WireguardClientCreateBulk) SaveX(ctx context.Context) []*WireguardClient {
	v, err := wccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wccb *WireguardClientCreateBulk) Exec(ctx context.Context) error {
	_, err := wccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wccb *WireguardClientCreateBulk) ExecX(ctx context.Context) {
	if err := wccb.Exec(ctx); err != nil {
		panic(err)
	}
}
