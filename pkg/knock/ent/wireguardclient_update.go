// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/boxjan/misc/pkg/knock/ent/predicate"
	"github.com/boxjan/misc/pkg/knock/ent/wireguardclient"
)

// WireguardClientUpdate is the builder for updating WireguardClient entities.
type WireguardClientUpdate struct {
	config
	hooks    []Hook
	mutation *WireguardClientMutation
}

// Where appends a list predicates to the WireguardClientUpdate builder.
func (wcu *WireguardClientUpdate) Where(ps ...predicate.WireguardClient) *WireguardClientUpdate {
	wcu.mutation.Where(ps...)
	return wcu
}

// SetCreatedAt sets the "created_at" field.
func (wcu *WireguardClientUpdate) SetCreatedAt(t time.Time) *WireguardClientUpdate {
	wcu.mutation.SetCreatedAt(t)
	return wcu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wcu *WireguardClientUpdate) SetNillableCreatedAt(t *time.Time) *WireguardClientUpdate {
	if t != nil {
		wcu.SetCreatedAt(*t)
	}
	return wcu
}

// SetUpdatedAt sets the "updated_at" field.
func (wcu *WireguardClientUpdate) SetUpdatedAt(t time.Time) *WireguardClientUpdate {
	wcu.mutation.SetUpdatedAt(t)
	return wcu
}

// SetDestroyedAt sets the "destroyed_at" field.
func (wcu *WireguardClientUpdate) SetDestroyedAt(t time.Time) *WireguardClientUpdate {
	wcu.mutation.SetDestroyedAt(t)
	return wcu
}

// SetExpired sets the "expired" field.
func (wcu *WireguardClientUpdate) SetExpired(b bool) *WireguardClientUpdate {
	wcu.mutation.SetExpired(b)
	return wcu
}

// SetNillableExpired sets the "expired" field if the given value is not nil.
func (wcu *WireguardClientUpdate) SetNillableExpired(b *bool) *WireguardClientUpdate {
	if b != nil {
		wcu.SetExpired(*b)
	}
	return wcu
}

// SetIdentify sets the "identify" field.
func (wcu *WireguardClientUpdate) SetIdentify(s string) *WireguardClientUpdate {
	wcu.mutation.SetIdentify(s)
	return wcu
}

// SetNillableIdentify sets the "identify" field if the given value is not nil.
func (wcu *WireguardClientUpdate) SetNillableIdentify(s *string) *WireguardClientUpdate {
	if s != nil {
		wcu.SetIdentify(*s)
	}
	return wcu
}

// SetServerPrivateKey sets the "server_private_key" field.
func (wcu *WireguardClientUpdate) SetServerPrivateKey(s string) *WireguardClientUpdate {
	wcu.mutation.SetServerPrivateKey(s)
	return wcu
}

// SetClientPrivateKey sets the "client_private_key" field.
func (wcu *WireguardClientUpdate) SetClientPrivateKey(s string) *WireguardClientUpdate {
	wcu.mutation.SetClientPrivateKey(s)
	return wcu
}

// SetNetifName sets the "netif_name" field.
func (wcu *WireguardClientUpdate) SetNetifName(s string) *WireguardClientUpdate {
	wcu.mutation.SetNetifName(s)
	return wcu
}

// SetPeerAddr sets the "peer_addr" field.
func (wcu *WireguardClientUpdate) SetPeerAddr(s string) *WireguardClientUpdate {
	wcu.mutation.SetPeerAddr(s)
	return wcu
}

// SetListenAddr sets the "listen_addr" field.
func (wcu *WireguardClientUpdate) SetListenAddr(s string) *WireguardClientUpdate {
	wcu.mutation.SetListenAddr(s)
	return wcu
}

// SetAllocCidr sets the "alloc_cidr" field.
func (wcu *WireguardClientUpdate) SetAllocCidr(s string) *WireguardClientUpdate {
	wcu.mutation.SetAllocCidr(s)
	return wcu
}

// SetServerAddress sets the "server_address" field.
func (wcu *WireguardClientUpdate) SetServerAddress(s string) *WireguardClientUpdate {
	wcu.mutation.SetServerAddress(s)
	return wcu
}

// SetClientAddress sets the "client_address" field.
func (wcu *WireguardClientUpdate) SetClientAddress(s string) *WireguardClientUpdate {
	wcu.mutation.SetClientAddress(s)
	return wcu
}

// SetReceiveBytes sets the "receive_bytes" field.
func (wcu *WireguardClientUpdate) SetReceiveBytes(u uint64) *WireguardClientUpdate {
	wcu.mutation.ResetReceiveBytes()
	wcu.mutation.SetReceiveBytes(u)
	return wcu
}

// AddReceiveBytes adds u to the "receive_bytes" field.
func (wcu *WireguardClientUpdate) AddReceiveBytes(u int64) *WireguardClientUpdate {
	wcu.mutation.AddReceiveBytes(u)
	return wcu
}

// SetTransmitBytes sets the "transmit_bytes" field.
func (wcu *WireguardClientUpdate) SetTransmitBytes(u uint64) *WireguardClientUpdate {
	wcu.mutation.ResetTransmitBytes()
	wcu.mutation.SetTransmitBytes(u)
	return wcu
}

// AddTransmitBytes adds u to the "transmit_bytes" field.
func (wcu *WireguardClientUpdate) AddTransmitBytes(u int64) *WireguardClientUpdate {
	wcu.mutation.AddTransmitBytes(u)
	return wcu
}

// Mutation returns the WireguardClientMutation object of the builder.
func (wcu *WireguardClientUpdate) Mutation() *WireguardClientMutation {
	return wcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wcu *WireguardClientUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	wcu.defaults()
	if len(wcu.hooks) == 0 {
		if err = wcu.check(); err != nil {
			return 0, err
		}
		affected, err = wcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WireguardClientMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wcu.check(); err != nil {
				return 0, err
			}
			wcu.mutation = mutation
			affected, err = wcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(wcu.hooks) - 1; i >= 0; i-- {
			if wcu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = wcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (wcu *WireguardClientUpdate) SaveX(ctx context.Context) int {
	affected, err := wcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wcu *WireguardClientUpdate) Exec(ctx context.Context) error {
	_, err := wcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcu *WireguardClientUpdate) ExecX(ctx context.Context) {
	if err := wcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wcu *WireguardClientUpdate) defaults() {
	if _, ok := wcu.mutation.UpdatedAt(); !ok {
		v := wireguardclient.UpdateDefaultUpdatedAt()
		wcu.mutation.SetUpdatedAt(v)
	}
	if _, ok := wcu.mutation.DestroyedAt(); !ok {
		v := wireguardclient.UpdateDefaultDestroyedAt()
		wcu.mutation.SetDestroyedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wcu *WireguardClientUpdate) check() error {
	if v, ok := wcu.mutation.Identify(); ok {
		if err := wireguardclient.IdentifyValidator(v); err != nil {
			return &ValidationError{Name: "identify", err: fmt.Errorf(`ent: validator failed for field "WireguardClient.identify": %w`, err)}
		}
	}
	if v, ok := wcu.mutation.ServerPrivateKey(); ok {
		if err := wireguardclient.ServerPrivateKeyValidator(v); err != nil {
			return &ValidationError{Name: "server_private_key", err: fmt.Errorf(`ent: validator failed for field "WireguardClient.server_private_key": %w`, err)}
		}
	}
	if v, ok := wcu.mutation.ClientPrivateKey(); ok {
		if err := wireguardclient.ClientPrivateKeyValidator(v); err != nil {
			return &ValidationError{Name: "client_private_key", err: fmt.Errorf(`ent: validator failed for field "WireguardClient.client_private_key": %w`, err)}
		}
	}
	if v, ok := wcu.mutation.NetifName(); ok {
		if err := wireguardclient.NetifNameValidator(v); err != nil {
			return &ValidationError{Name: "netif_name", err: fmt.Errorf(`ent: validator failed for field "WireguardClient.netif_name": %w`, err)}
		}
	}
	if v, ok := wcu.mutation.ListenAddr(); ok {
		if err := wireguardclient.ListenAddrValidator(v); err != nil {
			return &ValidationError{Name: "listen_addr", err: fmt.Errorf(`ent: validator failed for field "WireguardClient.listen_addr": %w`, err)}
		}
	}
	if v, ok := wcu.mutation.AllocCidr(); ok {
		if err := wireguardclient.AllocCidrValidator(v); err != nil {
			return &ValidationError{Name: "alloc_cidr", err: fmt.Errorf(`ent: validator failed for field "WireguardClient.alloc_cidr": %w`, err)}
		}
	}
	if v, ok := wcu.mutation.ServerAddress(); ok {
		if err := wireguardclient.ServerAddressValidator(v); err != nil {
			return &ValidationError{Name: "server_address", err: fmt.Errorf(`ent: validator failed for field "WireguardClient.server_address": %w`, err)}
		}
	}
	if v, ok := wcu.mutation.ClientAddress(); ok {
		if err := wireguardclient.ClientAddressValidator(v); err != nil {
			return &ValidationError{Name: "client_address", err: fmt.Errorf(`ent: validator failed for field "WireguardClient.client_address": %w`, err)}
		}
	}
	return nil
}

func (wcu *WireguardClientUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   wireguardclient.Table,
			Columns: wireguardclient.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: wireguardclient.FieldID,
			},
		},
	}
	if ps := wcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wcu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: wireguardclient.FieldCreatedAt,
		})
	}
	if value, ok := wcu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: wireguardclient.FieldUpdatedAt,
		})
	}
	if value, ok := wcu.mutation.DestroyedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: wireguardclient.FieldDestroyedAt,
		})
	}
	if value, ok := wcu.mutation.Expired(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: wireguardclient.FieldExpired,
		})
	}
	if value, ok := wcu.mutation.Identify(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wireguardclient.FieldIdentify,
		})
	}
	if value, ok := wcu.mutation.ServerPrivateKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wireguardclient.FieldServerPrivateKey,
		})
	}
	if value, ok := wcu.mutation.ClientPrivateKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wireguardclient.FieldClientPrivateKey,
		})
	}
	if value, ok := wcu.mutation.NetifName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wireguardclient.FieldNetifName,
		})
	}
	if value, ok := wcu.mutation.PeerAddr(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wireguardclient.FieldPeerAddr,
		})
	}
	if value, ok := wcu.mutation.ListenAddr(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wireguardclient.FieldListenAddr,
		})
	}
	if value, ok := wcu.mutation.AllocCidr(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wireguardclient.FieldAllocCidr,
		})
	}
	if value, ok := wcu.mutation.ServerAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wireguardclient.FieldServerAddress,
		})
	}
	if value, ok := wcu.mutation.ClientAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wireguardclient.FieldClientAddress,
		})
	}
	if value, ok := wcu.mutation.ReceiveBytes(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: wireguardclient.FieldReceiveBytes,
		})
	}
	if value, ok := wcu.mutation.AddedReceiveBytes(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: wireguardclient.FieldReceiveBytes,
		})
	}
	if value, ok := wcu.mutation.TransmitBytes(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: wireguardclient.FieldTransmitBytes,
		})
	}
	if value, ok := wcu.mutation.AddedTransmitBytes(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: wireguardclient.FieldTransmitBytes,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wireguardclient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// WireguardClientUpdateOne is the builder for updating a single WireguardClient entity.
type WireguardClientUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WireguardClientMutation
}

// SetCreatedAt sets the "created_at" field.
func (wcuo *WireguardClientUpdateOne) SetCreatedAt(t time.Time) *WireguardClientUpdateOne {
	wcuo.mutation.SetCreatedAt(t)
	return wcuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wcuo *WireguardClientUpdateOne) SetNillableCreatedAt(t *time.Time) *WireguardClientUpdateOne {
	if t != nil {
		wcuo.SetCreatedAt(*t)
	}
	return wcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (wcuo *WireguardClientUpdateOne) SetUpdatedAt(t time.Time) *WireguardClientUpdateOne {
	wcuo.mutation.SetUpdatedAt(t)
	return wcuo
}

// SetDestroyedAt sets the "destroyed_at" field.
func (wcuo *WireguardClientUpdateOne) SetDestroyedAt(t time.Time) *WireguardClientUpdateOne {
	wcuo.mutation.SetDestroyedAt(t)
	return wcuo
}

// SetExpired sets the "expired" field.
func (wcuo *WireguardClientUpdateOne) SetExpired(b bool) *WireguardClientUpdateOne {
	wcuo.mutation.SetExpired(b)
	return wcuo
}

// SetNillableExpired sets the "expired" field if the given value is not nil.
func (wcuo *WireguardClientUpdateOne) SetNillableExpired(b *bool) *WireguardClientUpdateOne {
	if b != nil {
		wcuo.SetExpired(*b)
	}
	return wcuo
}

// SetIdentify sets the "identify" field.
func (wcuo *WireguardClientUpdateOne) SetIdentify(s string) *WireguardClientUpdateOne {
	wcuo.mutation.SetIdentify(s)
	return wcuo
}

// SetNillableIdentify sets the "identify" field if the given value is not nil.
func (wcuo *WireguardClientUpdateOne) SetNillableIdentify(s *string) *WireguardClientUpdateOne {
	if s != nil {
		wcuo.SetIdentify(*s)
	}
	return wcuo
}

// SetServerPrivateKey sets the "server_private_key" field.
func (wcuo *WireguardClientUpdateOne) SetServerPrivateKey(s string) *WireguardClientUpdateOne {
	wcuo.mutation.SetServerPrivateKey(s)
	return wcuo
}

// SetClientPrivateKey sets the "client_private_key" field.
func (wcuo *WireguardClientUpdateOne) SetClientPrivateKey(s string) *WireguardClientUpdateOne {
	wcuo.mutation.SetClientPrivateKey(s)
	return wcuo
}

// SetNetifName sets the "netif_name" field.
func (wcuo *WireguardClientUpdateOne) SetNetifName(s string) *WireguardClientUpdateOne {
	wcuo.mutation.SetNetifName(s)
	return wcuo
}

// SetPeerAddr sets the "peer_addr" field.
func (wcuo *WireguardClientUpdateOne) SetPeerAddr(s string) *WireguardClientUpdateOne {
	wcuo.mutation.SetPeerAddr(s)
	return wcuo
}

// SetListenAddr sets the "listen_addr" field.
func (wcuo *WireguardClientUpdateOne) SetListenAddr(s string) *WireguardClientUpdateOne {
	wcuo.mutation.SetListenAddr(s)
	return wcuo
}

// SetAllocCidr sets the "alloc_cidr" field.
func (wcuo *WireguardClientUpdateOne) SetAllocCidr(s string) *WireguardClientUpdateOne {
	wcuo.mutation.SetAllocCidr(s)
	return wcuo
}

// SetServerAddress sets the "server_address" field.
func (wcuo *WireguardClientUpdateOne) SetServerAddress(s string) *WireguardClientUpdateOne {
	wcuo.mutation.SetServerAddress(s)
	return wcuo
}

// SetClientAddress sets the "client_address" field.
func (wcuo *WireguardClientUpdateOne) SetClientAddress(s string) *WireguardClientUpdateOne {
	wcuo.mutation.SetClientAddress(s)
	return wcuo
}

// SetReceiveBytes sets the "receive_bytes" field.
func (wcuo *WireguardClientUpdateOne) SetReceiveBytes(u uint64) *WireguardClientUpdateOne {
	wcuo.mutation.ResetReceiveBytes()
	wcuo.mutation.SetReceiveBytes(u)
	return wcuo
}

// AddReceiveBytes adds u to the "receive_bytes" field.
func (wcuo *WireguardClientUpdateOne) AddReceiveBytes(u int64) *WireguardClientUpdateOne {
	wcuo.mutation.AddReceiveBytes(u)
	return wcuo
}

// SetTransmitBytes sets the "transmit_bytes" field.
func (wcuo *WireguardClientUpdateOne) SetTransmitBytes(u uint64) *WireguardClientUpdateOne {
	wcuo.mutation.ResetTransmitBytes()
	wcuo.mutation.SetTransmitBytes(u)
	return wcuo
}

// AddTransmitBytes adds u to the "transmit_bytes" field.
func (wcuo *WireguardClientUpdateOne) AddTransmitBytes(u int64) *WireguardClientUpdateOne {
	wcuo.mutation.AddTransmitBytes(u)
	return wcuo
}

// Mutation returns the WireguardClientMutation object of the builder.
func (wcuo *WireguardClientUpdateOne) Mutation() *WireguardClientMutation {
	return wcuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wcuo *WireguardClientUpdateOne) Select(field string, fields ...string) *WireguardClientUpdateOne {
	wcuo.fields = append([]string{field}, fields...)
	return wcuo
}

// Save executes the query and returns the updated WireguardClient entity.
func (wcuo *WireguardClientUpdateOne) Save(ctx context.Context) (*WireguardClient, error) {
	var (
		err  error
		node *WireguardClient
	)
	wcuo.defaults()
	if len(wcuo.hooks) == 0 {
		if err = wcuo.check(); err != nil {
			return nil, err
		}
		node, err = wcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WireguardClientMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wcuo.check(); err != nil {
				return nil, err
			}
			wcuo.mutation = mutation
			node, err = wcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wcuo.hooks) - 1; i >= 0; i-- {
			if wcuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = wcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (wcuo *WireguardClientUpdateOne) SaveX(ctx context.Context) *WireguardClient {
	node, err := wcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wcuo *WireguardClientUpdateOne) Exec(ctx context.Context) error {
	_, err := wcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcuo *WireguardClientUpdateOne) ExecX(ctx context.Context) {
	if err := wcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wcuo *WireguardClientUpdateOne) defaults() {
	if _, ok := wcuo.mutation.UpdatedAt(); !ok {
		v := wireguardclient.UpdateDefaultUpdatedAt()
		wcuo.mutation.SetUpdatedAt(v)
	}
	if _, ok := wcuo.mutation.DestroyedAt(); !ok {
		v := wireguardclient.UpdateDefaultDestroyedAt()
		wcuo.mutation.SetDestroyedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wcuo *WireguardClientUpdateOne) check() error {
	if v, ok := wcuo.mutation.Identify(); ok {
		if err := wireguardclient.IdentifyValidator(v); err != nil {
			return &ValidationError{Name: "identify", err: fmt.Errorf(`ent: validator failed for field "WireguardClient.identify": %w`, err)}
		}
	}
	if v, ok := wcuo.mutation.ServerPrivateKey(); ok {
		if err := wireguardclient.ServerPrivateKeyValidator(v); err != nil {
			return &ValidationError{Name: "server_private_key", err: fmt.Errorf(`ent: validator failed for field "WireguardClient.server_private_key": %w`, err)}
		}
	}
	if v, ok := wcuo.mutation.ClientPrivateKey(); ok {
		if err := wireguardclient.ClientPrivateKeyValidator(v); err != nil {
			return &ValidationError{Name: "client_private_key", err: fmt.Errorf(`ent: validator failed for field "WireguardClient.client_private_key": %w`, err)}
		}
	}
	if v, ok := wcuo.mutation.NetifName(); ok {
		if err := wireguardclient.NetifNameValidator(v); err != nil {
			return &ValidationError{Name: "netif_name", err: fmt.Errorf(`ent: validator failed for field "WireguardClient.netif_name": %w`, err)}
		}
	}
	if v, ok := wcuo.mutation.ListenAddr(); ok {
		if err := wireguardclient.ListenAddrValidator(v); err != nil {
			return &ValidationError{Name: "listen_addr", err: fmt.Errorf(`ent: validator failed for field "WireguardClient.listen_addr": %w`, err)}
		}
	}
	if v, ok := wcuo.mutation.AllocCidr(); ok {
		if err := wireguardclient.AllocCidrValidator(v); err != nil {
			return &ValidationError{Name: "alloc_cidr", err: fmt.Errorf(`ent: validator failed for field "WireguardClient.alloc_cidr": %w`, err)}
		}
	}
	if v, ok := wcuo.mutation.ServerAddress(); ok {
		if err := wireguardclient.ServerAddressValidator(v); err != nil {
			return &ValidationError{Name: "server_address", err: fmt.Errorf(`ent: validator failed for field "WireguardClient.server_address": %w`, err)}
		}
	}
	if v, ok := wcuo.mutation.ClientAddress(); ok {
		if err := wireguardclient.ClientAddressValidator(v); err != nil {
			return &ValidationError{Name: "client_address", err: fmt.Errorf(`ent: validator failed for field "WireguardClient.client_address": %w`, err)}
		}
	}
	return nil
}

func (wcuo *WireguardClientUpdateOne) sqlSave(ctx context.Context) (_node *WireguardClient, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   wireguardclient.Table,
			Columns: wireguardclient.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: wireguardclient.FieldID,
			},
		},
	}
	id, ok := wcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WireguardClient.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, wireguardclient.FieldID)
		for _, f := range fields {
			if !wireguardclient.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != wireguardclient.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wcuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: wireguardclient.FieldCreatedAt,
		})
	}
	if value, ok := wcuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: wireguardclient.FieldUpdatedAt,
		})
	}
	if value, ok := wcuo.mutation.DestroyedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: wireguardclient.FieldDestroyedAt,
		})
	}
	if value, ok := wcuo.mutation.Expired(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: wireguardclient.FieldExpired,
		})
	}
	if value, ok := wcuo.mutation.Identify(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wireguardclient.FieldIdentify,
		})
	}
	if value, ok := wcuo.mutation.ServerPrivateKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wireguardclient.FieldServerPrivateKey,
		})
	}
	if value, ok := wcuo.mutation.ClientPrivateKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wireguardclient.FieldClientPrivateKey,
		})
	}
	if value, ok := wcuo.mutation.NetifName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wireguardclient.FieldNetifName,
		})
	}
	if value, ok := wcuo.mutation.PeerAddr(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wireguardclient.FieldPeerAddr,
		})
	}
	if value, ok := wcuo.mutation.ListenAddr(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wireguardclient.FieldListenAddr,
		})
	}
	if value, ok := wcuo.mutation.AllocCidr(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wireguardclient.FieldAllocCidr,
		})
	}
	if value, ok := wcuo.mutation.ServerAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wireguardclient.FieldServerAddress,
		})
	}
	if value, ok := wcuo.mutation.ClientAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wireguardclient.FieldClientAddress,
		})
	}
	if value, ok := wcuo.mutation.ReceiveBytes(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: wireguardclient.FieldReceiveBytes,
		})
	}
	if value, ok := wcuo.mutation.AddedReceiveBytes(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: wireguardclient.FieldReceiveBytes,
		})
	}
	if value, ok := wcuo.mutation.TransmitBytes(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: wireguardclient.FieldTransmitBytes,
		})
	}
	if value, ok := wcuo.mutation.AddedTransmitBytes(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: wireguardclient.FieldTransmitBytes,
		})
	}
	_node = &WireguardClient{config: wcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wireguardclient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
